@import "vars";

/* breakpoints */

$break-desktop: 960px;
$break-desktop-large: 1200px;
$break-mobile: 380px;
$break-mobile-horizontal: 640px;
$break-mobile-large: 786px;
@mixin wrapper() {
    max-width: 960px;
    margin: 0 auto !important;
}
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}
    @mixin headings($from: 1, $to: 6) {
        @for $i from $from through $to {
            h#{$i} {
                @content
            }
        }
    }
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}
@mixin proxima-font($weight:standard) {
    @if($weight==standard) {
        font-family: "AvenirNextW05-Regular", arial, helvetica, sans-serif;
    }
    @if($weight==semibold) {
        font-family: "AvenirNextW05-Demi", arial, helvetica, sans-serif;
    }
    @else if($weight==light) {
        font-family: "AvenirNextW05-Light", arial, helvetica, sans-serif;
    }
}
@mixin loading-gif() {
    background-image: url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMiAzMiIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiBmaWxsPSJibGFjayI+DQogIDxwYXRoICBvcGFjaXR5PSIuMjUiIGQ9Ik0xNiAwIEExNiAxNiAwIDAgMCAxNiAzMiBBMTYgMTYgMCAwIDAgMTYgMCBNMTYgNCBBMTIgMTIgMCAwIDEgMTYgMjggQTEyIDEyIDAgMCAxIDE2IDQiLz4NCiAgPHBhdGggZmlsbD0nIzFhODBiNicgZD0iTTE2IDAgQTE2IDE2IDAgMCAxIDMyIDE2IEwyOCAxNiBBMTIgMTIgMCAwIDAgMTYgNHoiPg0KICAgIDxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0icm90YXRlIiBmcm9tPSIwIDE2IDE2IiB0bz0iMzYwIDE2IDE2IiBkdXI9IjAuOHMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIiAvPg0KICA8L3BhdGg+DQo8L3N2Zz4NCg==);
    background-position: center center;
    background-repeat: no-repeat;
}
@mixin respond-to($media) {
    @if $media==mobile {
        @media only screen and (max-width: $break-mobile) {
            @content;
        }
    }
    @else if $media==mobile-horizontal {
        @media only screen and (max-width: $break-mobile-horizontal - 1) {
            @content;
        }
    }
    @else if $media==mobile-large {
        @media only screen and (max-width: $break-mobile-large) {
            @content;
        }
    }
    @else if $media==tablet {
        @media only screen and (min-width: $break-mobile-large) {
            @content;
        }
    }
    @else if $media==all-mobile {
        @media only screen and (max-width: $break-desktop - 1) {
            @content;
        }
    }
    @else if $media==desktop {
        @media only screen and (min-width: $break-desktop) {
            @content;
        }
    }
    @else if $media==desktop-large {
        @media only screen and (min-width: $break-desktop-large) {
            @content;
        }
    }
}
@mixin border-basic($position:all, $border-color:$border-gray, $border-width:1px) {
    @if($position!=all) {
        border-#{$position}-width: $border-width;
        border-#{$position}-style: solid;
        border-#{$position}-color: $border-color;
    }
    @else {
        border-width: $border-width;
            border-style: solid;
            border-color: $border-color;
    }
}
@mixin fixed-bg($pos, $min-height:240px) {
    background-position: $pos;
    background-attachment: fixed;
    min-height: $min-height;
}
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

//Since container is a class atomatically added to some component, we need the ability to strip some of its styles
@mixin uncontainer {    
    padding: 0;
    @media (min-width: 1200px) {
        width: auto;
    }
    @media (min-width: 992px) {
        width: auto;
    }
    @media (min-width: 768px) {
        width: auto;
    }    
}

@mixin container {
    width: auto;
    max-width: $max-content-width;

    @media (min-width: 768px) {
        width: auto;
    }
    @media (min-width: 768px) {
        float: none;
    }        
    @media (min-width: 1200px) {
        width: auto;
    }
    @media (min-width: 992px) {
        width: auto;
    }
    @media (min-width: 768px) {
        width: auto;;
    }  
}

@mixin btn-default {
    display: inline-block;
    padding: 0.65em 2em;
    text-decoration: none;
    font-size: 0.75em;    
    font-weight: bold;
    text-align: center;
}

@mixin btn-primary {  
    @include btn-default;
    color: $btn-primary; 
    background-color: $btn-primary-bg !important;
    border: 1px solid $btn-primary-bg;    
    transition: opacity 0.3s ease;
    border-radius: 4px 4px 4px 4px;
    text-decoration: none;
    
    &:hover {
        color: $btn-primary-active; 
        background-color: $btn-primary-active-bg !important;
        border: 1px solid $btn-primary-active-border;    
    }
}

@mixin btn-secondary {    
    @include btn-default;
    color: $btn-secondary;      
    background-color: $btn-secondary-bg !important;
    border: 1px solid $btn-secondary;
    border-radius: 4px;

    &:hover {
        color: $btn-secondary-active; 
        background-color: $btn-secondary-active-bg !important;
        border: 1px solid $btn-secondary-active-border;    
    }
}

@mixin full-width-container {
    max-width: none !important;
    width: 100vw !important;
    position: relative;
    left: 50% !important;
    right: 50% !important;
    margin-left: -50vw !important;
    margin-right: -50vw !important;
    padding: 0;
}

@mixin object-fit($size: cover, $position:center) {
    object-fit: $size;
    object-position: $position;
	font-family: 'object-fit: #{$size}; object-position: #{$position};';
}