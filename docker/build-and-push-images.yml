# Build Sitecoredemo Docker images
trigger:
  branches:
    include:
      - develop
      - upgrade/*
resources:
  - repo: self
    clean: true

variables:
  GitVersion.SemVer: ""
  SITECORE_VERSION: "10.3"
  GitVersion.PreReleaseLabel: ""
  tag: "$(GitVersion.SemVer)"
  additionalImageTags: ""

stages:
  - stage: Build_Solution
    displayName: "Build Solution Image"
    jobs:
      - job: Build_Solution_Job
        variables:
          osVersion: "ltsc2019"
          nanoserverVersion: "1809"
        strategy:
          matrix:
            content:
              serviceName: 'solution-content'
            data:
              serviceName: 'solution-data'
            xconnect:
              serviceName: 'solution-xconnect'
        pool:
          name: 'docker-ltsc2019-agents'
        workspace:
          clean: all
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            displayName: "Build Solution Image"
            inputs:
              targetType: "inline"
              script: |
                $sitecoreRegistry = "$(sitecore.container.registry)"
                $sitecoreVersion = "$(SITECORE_VERSION)"
                # Pre-release build is required for hotfix
                $preRelease = $false

                az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                if ("$(Build.SourceBranch)" -match "upgrade/(?<version>\d+\.\d+\.\d+)") {
                    $preRelease = $true
                }

                if ($preRelease) {
                    $sitecoreRegistry = "$(sitecore.internal.container.registry)"
                }

                if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
                  az acr login -n "$sitecoreRegistry"
                }

                az acr login -n $(container.registry.short)

                $params = @{}
                $params.Add("IsolationMode","process")
                $params.Add("SitecoreRegistry","$sitecoreRegistry")
                $params.Add("DemoTeamRegistry","$(REGISTRY)")
                $params.Add("WindowsVersion","$(osVersion)")
                $params.Add("SitecoreVersion","$sitecoreVersion")
                $params.Add("SolutionVersion", "$(tag)")
                $params.add("Prerelease", $preRelease)

                ./init-ci.ps1 @params

                $env:INTERNAL_NUGET_SOURCE_USERNAME="$(INTERNAL_NUGET_SOURCE_USERNAME)"
                $env:INTERNAL_NUGET_SOURCE="$(INTERNAL_NUGET_SOURCE)"
                $env:INTERNAL_NUGET_SOURCE_PASSWORD="$(INTERNAL_NUGET_SOURCE_PASSWORD)"
                $env:LTSC_NANOSERVER_VERSION="1809"

                docker-compose -f docker-compose.build.solution.yml build $(serviceName)
                docker-compose -f docker-compose.build.solution.yml push $(serviceName)
      - job: Copy_Solution_Job
        displayName: "Copy solution assets to additional OS versions"
        dependsOn: Build_Solution_Job
        strategy:
          matrix:
            ltsc2019:
              poolName: "docker-ltsc2019-agents"
              osVersion: "ltsc2019"
              nanoserverVersion: "1809"
        workspace:
          clean: all
        pool:
          name: "$(poolName)"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            displayName: "Copy Solution Image"
            inputs:
              targetType: "inline"
              script: |
                $sitecoreRegistry = "$(sitecore.container.registry)"

                az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                if ("$(Build.SourceBranch)" -match "upgrade/(?<version>\d+\.\d+\.\d+)") {
                    $sitecoreRegistry = "$(sitecore.internal.container.registry)"
                    $preRelease = $true
                }

                if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
                  az acr login -n "$sitecoreRegistry"
                }

                az acr login -n $(container.registry.short)

                $env:SOLUTION_VERSION="$(tag)"
                $env:REGISTRY="$(REGISTRY)"
                $env:NANOSERVER_VERSION="$(nanoserverVersion)"
                $env:LTSC_NANOSERVER_VERSION="1809"
                $env:SITECORE_VERSION="$(SITECORE_VERSION)"
                $filePath = 'docker/docker-compose.copy.solution.yml'
                docker-compose -f $filePath build --pull
                docker-compose -f $filePath push
  - stage: Docker_Windows
    dependsOn: Build_Solution
    displayName: "Build Windows Images"
    jobs:
      - job: Build_Platform
        strategy:
          matrix:
            ltsc2019-xp0:
              poolName: "docker-ltsc2019-agents"
              osVersion: "ltsc2019"
              nanoserverVersion: "1809"
              docker-compose: 'docker-compose.yml'
              docker-compose-build: 'docker-compose.build.yml'
              topology: 'xp0'
            ltsc2019-xp1:
              poolName: "docker-ltsc2019-agents"
              osVersion: "ltsc2019"
              nanoserverVersion: "1809"
              docker-compose: 'docker-compose-xp1.yml'
              docker-compose-build: 'docker-compose-xp1.build.yml'
              topology: 'xp1'
        displayName: "Build Windows Docker Images"
        pool:
          name: $(poolName)
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            displayName: "Build and Push Windows Images"
            inputs:
              targetType: "inline"
              script: |
                $params = @{}

                $sitecoreRegistry = "$(sitecore.container.registry)"

                az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                if ("$(Build.SourceBranch)" -match "upgrade/(?<version>\d+\.\d+\.\d+)") {
                    $sitecoreRegistry = "$(sitecore.internal.container.registry)"
                }

                if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
                  az acr login -n "$sitecoreRegistry"
                }
                az acr login -n "$(container.registry.short)"

                $sitecoreVersion = "$(SITECORE_VERSION)"
                $params.Add("DemoTeamRegistry","$(REGISTRY)")
                $params.Add("SitecoreRegistry","$sitecoreRegistry")
                $params.Add("WindowsVersion","$(osVersion)")
                $params.Add("IsolationMode","process")
                $params.Add("SitecoreVersion","$sitecoreVersion")
                $params.Add("DemoVersion","$(tag)")
                $params.Add("SolutionVersion","$(tag)")

                ./init-ci.ps1 @params

                az login -u $(sitecore.container.registry.username) -p $(sitecore.container.registry.password)
                az acr login -n $(container.registry.short)

                ./pull-build-images.ps1 -CI

                docker-compose -f docker-compose.build.solution.yml pull

                # Reset demo version to correct tag without build id
                $env:DEMO_VERSION = "$(tag)"

                ./init-ci.ps1 @params
                docker-compose -f $(docker-compose) -f $(docker-compose-build) build cm
                docker-compose -f $(docker-compose) -f $(docker-compose-build) push cm
                docker-compose -f $(docker-compose) -f $(docker-compose-build) build --pull --parallel
                docker-compose -f $(docker-compose) -f $(docker-compose-build) push

                $primaryBuild = $(if ([string]::IsNullOrEmpty("$(additionalImageTags)")) { $false } else { $true })
                if ($primaryBuild) {
                  $env:DEMO_VERSION = "$(additionalImageTags)"
                  docker-compose -f $(docker-compose) -f $(docker-compose-build) build cm
                  docker-compose -f $(docker-compose) -f $(docker-compose-build) push cm
                  docker-compose -f $(docker-compose) -f $(docker-compose-build) build --parallel
                  docker-compose -f $(docker-compose) -f $(docker-compose-build) push
                }
  - stage: Docker_Linux
    dependsOn: Build_Solution
    displayName: "Build Linux Images"
    jobs:
      - job: Build_Linux_Images
        displayName: "Build Linux Images"
        pool:
          name: docker-linux-agents
        workspace:
          clean: all
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
          - template: version.yml
          - task: PowerShell@2
            displayName: "Downloading Latest Images"
            inputs:
              targetType: "inline"
              script: |
                $params = @{}

                $sitecoreRegistry = "$(sitecore.container.registry)"

                az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"

                if ("$(Build.SourceBranch)" -match "upgrade/(?<version>\d+\.\d+\.\d+)") {
                    $sitecoreRegistry = "$(sitecore.internal.container.registry)"
                }

                if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
                  az acr login -n "$sitecoreRegistry"
                }
                az acr login -n "$(container.registry.short)"

                $sitecoreVersion = "$(SITECORE_VERSION)"

                $params.Add("DemoTeamRegistry","$(REGISTRY)")
                $params.Add("SitecoreRegistry","$sitecoreRegistry")
                $params.Add("SitecoreVersion","$sitecoreVersion")

                ./init-ci.ps1 @params

                ./pull-linux-build-images.ps1
              pwsh: true
          - task: DockerCompose@0
            displayName: "Docker Compose Build"
            inputs:
              containerregistrytype: "Azure Container Registry"
              azureSubscription: "$(azure.subscription)"
              azureContainerRegistry: "$(container.registry)"
              dockerComposeFile: "docker/docker-compose-linux.yml"
              dockerComposeFileArgs: |
                DEMO_VERSION=$(tag)
                REGISTRY=$(REGISTRY)
                SITECORE_VERSION=$(SITECORE_VERSION)
                SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
                SITECORE_LICENSE=$(SITECORE_LICENSE)
                TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
                OPENCALAIS_ACCESSTOKEN=$(OpenCalais.AccessToken)
                HOSTNAME_SUFFIX=
              qualifyImageNames: false
              action: "Build services"
              additionalImageTags: "$(SITECORE_VERSION)-linux-$(additionalImageTags)"
              arguments: "$(no.cache)"
              currentWorkingDirectory: "$(Build.SourcesDirectory)"
          - task: DockerCompose@0
            displayName: "Push Images"
            inputs:
              containerregistrytype: "Azure Container Registry"
              azureSubscription: $(azure.subscription)
              azureContainerRegistry: $(container.registry)
              dockerComposeFile: "docker/docker-compose-linux.yml"
              dockerComposeFileArgs: |
                REGISTRY=$(REGISTRY)
                DEMO_VERSION=$(tag)
                SITECORE_VERSION=$(SITECORE_VERSION)
                SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
                SITECORE_LICENSE=$(SITECORE_LICENSE)
                TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
                HOSTNAME_SUFFIX=
              action: "Push services"
              additionalImageTags: "$(SITECORE_VERSION)-linux-$(additionalImageTags)"
              currentWorkingDirectory: "$(Build.SourcesDirectory)"
  - stage: Update_Portal_Databases_Nightly
    displayName: "Update 'nightly' version in portal databases"
    dependsOn:
      - Release_Notes
    condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Update_Tags
        displayName: "Update Tags"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                Invoke-RestMethod -Uri "$(DEV_PORTAL_V2_UPDATE_DEFINITION)&definitionId=17" -Method POST -Body "{ tag: '$(GitVersion.SemVer)', revision: '$(GitVersion.Sha)' }" -ContentType "application/json"
  - stage: Update_DEV_Portal_Databases_Stable
    displayName: "Update 'stable' version in the DEV portal database"
    dependsOn:
      - Release_Notes
    condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Update_Dev_Database
        displayName: "Update Dev Database"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                Invoke-RestMethod -Uri "$(DEV_PORTAL_V2_UPDATE_DEFINITION)&definitionId=20" -Method POST -Body "{ tag: '$(GitVersion.SemVer)', revision: '$(GitVersion.Sha)' }" -ContentType "application/json"

  - stage: Update_PROD_Portal_Database_Stable
    displayName: "Update 'stable' version in the PROD portal database"
    dependsOn:
      - Release_Notes
    condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Update_Production_Database
        displayName: "Update Production Database"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "5.0.x"
              installationPath: "c:/program files/dotnet"
              performMultiLevelLookup: true
          - template: version.yml
          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                Invoke-RestMethod -Uri "$(PROD_PORTAL_V2_UPDATE_DEFINITION)&definitionId=11" -Method POST -Body "{ tag: '$(GitVersion.SemVer)', revision: '$(GitVersion.Sha)' }" -ContentType "application/json"
      - deployment: Update_Production_Database_Deployment
        displayName: "Update Production Database Deployment"
        environment: Production Portal Database

  - stage: Release_Notes
    displayName: "Create Release Notes"
    dependsOn:
      - Docker_Windows
      - Docker_Linux
    condition: and(succeeded('Docker_Windows'), succeeded('Docker_Linux'),or( eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Generate_Release_Notes
        pool:
          vmImage: "windows-latest"
        displayName: "Generate Release Notes"
        steps:
          - template: version.yml
          - task: XplatGenerateReleaseNotes@3
            inputs:
              outputfile: "$(Build.ArtifactStagingDirectory)/releasenotes-platform-xp0-v2-$(GitVersion.SemVer).md"
              templateLocation: "File"
              templatefile: "release-notes-template.hb"
              dumpPayloadToConsole: true
              dumpPayloadToFile: false
              replaceFile: true
              appendToFile: false
              getParentsAndChildren: False
              sortWi: true
              checkStage: false
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/releasenotes-platform-xp0-v2-$(GitVersion.SemVer).md"
              artifact: "Release Notes"
              publishLocation: "pipeline"
          - task: AzureCLI@2
            displayName: "Upload release notes"
            inputs:
              azureSubscription: "$(azure.subscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: "az storage file upload --account-name dockerassets  --share-name release-notes --source $(Build.ArtifactStagingDirectory)/releasenotes-platform-xp0-v2-$(GitVersion.SemVer).md"
